<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\Users\Kudos\Desktop\fluent-build\compile\FluentBuildWithTests.dll" total="164" errors="37" failures="0" not-run="1" inconclusive="0" ignored="1" skipped="0" invalid="0" date="2012-04-18" time="21:32:18">
  <environment nunit-version="2.5.7.10213" clr-version="2.0.50727.5448" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="C:\Users\Kudos\Desktop\fluent-build" machine-name="KUDOS-LAPTOP2" user="Kudos" user-domain="Kudos-Laptop2" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="Assembly" name="C:\Users\Kudos\Desktop\fluent-build\compile\FluentBuildWithTests.dll" executed="True" result="Failure" success="False" time="2.681" asserts="0">
    <results>
      <test-suite type="Namespace" name="FluentBuild" executed="True" result="Failure" success="False" time="2.669" asserts="0">
        <results>
          <test-suite type="Namespace" name="ApplicationProperties" executed="True" result="Success" success="True" time="0.388" asserts="0">
            <results>
              <test-suite type="TestFixture" name="CommandLinePropertiesTests" executed="True" result="Success" success="True" time="0.076" asserts="0">
                <results>
                  <test-case name="FluentBuild.ApplicationProperties.CommandLinePropertiesTests.ShouldConstructWithProperties" executed="True" result="Success" success="True" time="0.036" asserts="1" />
                  <test-case name="FluentBuild.ApplicationProperties.CommandLinePropertiesTests.ShouldGetAndSetProperly" executed="True" result="Success" success="True" time="0.013" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="CruiseControlPropertiesTests" executed="True" result="Success" success="True" time="0.018" asserts="0">
                <results>
                  <test-case name="FluentBuild.ApplicationProperties.CruiseControlPropertiesTests.AllPropertiesShouldMap" executed="True" result="Success" success="True" time="0.017" asserts="10" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TeamCityPropertiesTests" executed="True" result="Success" success="True" time="0.283" asserts="0">
                <results>
                  <test-case name="FluentBuild.ApplicationProperties.TeamCityPropertiesTests.BuildNumberShouldCallToWrapper" executed="True" result="Success" success="True" time="0.280" asserts="0" />
                  <test-case name="FluentBuild.ApplicationProperties.TeamCityPropertiesTests.ConfigurationNameShouldCallToWrapper" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="FluentBuild.ApplicationProperties.TeamCityPropertiesTests.ProjectName" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="AssemblyInfoBuilding" executed="True" result="Success" success="True" time="0.024" asserts="0">
            <results>
              <test-suite type="TestFixture" name="AssemblyInfoDetailsTests" executed="True" result="Success" success="True" time="0.008" asserts="0">
                <results>
                  <test-case name="FluentBuild.AssemblyInfoBuilding.AssemblyInfoDetailsTests.ImportShouldNotAllowDuplicates" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                  <test-case name="FluentBuild.AssemblyInfoBuilding.AssemblyInfoDetailsTests.ShouldHandleAllDefaultAttributes" executed="True" result="Success" success="True" time="0.006" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="AssemblyInfoLanguageTests" executed="True" result="Success" success="True" time="0.003" asserts="0">
                <results>
                  <test-case name="FluentBuild.AssemblyInfoBuilding.AssemblyInfoLanguageTests.EnsureCSharpLanguageBuildsProperly" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="FluentBuild.AssemblyInfoBuilding.AssemblyInfoLanguageTests.EnsureVisualBasicLanguageBuildsProperly" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="CSharpAssemblyInfoBuilderTests" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <results>
                  <test-case name="FluentBuild.AssemblyInfoBuilding.CSharpAssemblyInfoBuilderTests.ShouldBuildString" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="VisualBasicAssemblyInfoBuilderTests" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <results>
                  <test-case name="FluentBuild.AssemblyInfoBuilding.VisualBasicAssemblyInfoBuilderTests.ShouldBuildString" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Compilation" executed="True" result="Failure" success="False" time="0.879" asserts="0">
            <results>
              <test-suite type="TestFixture" name="BuildTaskTests" executed="True" result="Failure" success="False" time="0.416" asserts="0">
                <results>
                  <test-case name="FluentBuild.Compilation.BuildTaskTests.AddResource_ShouldAddSingleFileResource" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                  <test-case name="FluentBuild.Compilation.BuildTaskTests.Args_ShouldCreateProperArgs" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                  <test-case name="FluentBuild.Compilation.BuildTaskTests.Args_ShouldCreateProperArgs_With_Fileset_Resources" executed="True" result="Error" success="False" time="0.191" asserts="0">
                    <failure>
                      <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at FluentBuild.Compilation.BuildTaskTests.Args_ShouldCreateProperArgs_With_Fileset_Resources()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.BuildTaskTests.Args_ShouldCreateProperArgs_With_Resources" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="FluentBuild.Compilation.BuildTaskTests.Args_ShouldCreateProperArgs_With_Sources" executed="True" result="Error" success="False" time="0.008" asserts="0">
                    <failure>
                      <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at FluentBuild.Compilation.BuildTaskTests.Args_ShouldCreateProperArgs_With_Sources()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.BuildTaskTests.Args_ShouldCreateProperArgs_With_Sources_And_Debug_Symbols" executed="True" result="Error" success="False" time="0.008" asserts="0">
                    <failure>
                      <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at FluentBuild.Compilation.BuildTaskTests.Args_ShouldCreateProperArgs_With_Sources_And_Debug_Symbols()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.BuildTaskTests.Args_ShouldCreateProperReferences" executed="True" result="Error" success="False" time="0.007" asserts="0">
                    <failure>
                      <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at FluentBuild.Compilation.BuildTaskTests.Args_ShouldCreateProperReferences()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.BuildTaskTests.OutputFileTo_ShouldWorkWithBuildArtifact" executed="True" result="Error" success="False" time="0.010" asserts="0">
                    <failure>
                      <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at FluentBuild.Compilation.BuildTaskTests.OutputFileTo_ShouldWorkWithBuildArtifact()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.BuildTaskTests.UsingCsc_Compiler_Should_Be_CSC" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="FluentBuild.Compilation.BuildTaskTests.UsingCsc_Compiler_Should_Be_VBC" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MsBuildTaskTests" executed="True" result="Failure" success="False" time="0.381" asserts="0">
                <results>
                  <test-case name="FluentBuild.Compilation.MsBuildTaskTests.BuildArgs_ShouldAddConfigurationIfSpecified" executed="True" result="Error" success="False" time="0.130" asserts="0">
                    <failure>
                      <message><![CDATA[SetUp : System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Compilation.MsBuildTaskTests.Setup() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Compilation\MsBuildTaskTests.cs:line 26
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.MsBuildTaskTests.BuildArgs_ShouldHaveFirstArgAsProjectOrSolution" executed="True" result="Error" success="False" time="0.007" asserts="0">
                    <failure>
                      <message><![CDATA[SetUp : System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Compilation.MsBuildTaskTests.Setup() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Compilation\MsBuildTaskTests.cs:line 26
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.MsBuildTaskTests.BuildArgs_ShouldHaveTarget" executed="True" result="Error" success="False" time="0.007" asserts="0">
                    <failure>
                      <message><![CDATA[SetUp : System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Compilation.MsBuildTaskTests.Setup() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Compilation\MsBuildTaskTests.cs:line 26
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.MsBuildTaskTests.BuildArgs_ShouldNotHaveConfigurationIfNoneSpecified" executed="True" result="Error" success="False" time="0.005" asserts="0">
                    <failure>
                      <message><![CDATA[SetUp : System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Compilation.MsBuildTaskTests.Setup() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Compilation\MsBuildTaskTests.cs:line 26
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.MsBuildTaskTests.BuildArgs_ShouldSetOutDirIfTrailingSlashIsNotSet" executed="True" result="Error" success="False" time="0.005" asserts="0">
                    <failure>
                      <message><![CDATA[SetUp : System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Compilation.MsBuildTaskTests.Setup() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Compilation\MsBuildTaskTests.cs:line 26
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.MsBuildTaskTests.BuildArgs_ShouldSetOutDirIfTrailingSlashIsSet" executed="True" result="Error" success="False" time="0.005" asserts="0">
                    <failure>
                      <message><![CDATA[SetUp : System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Compilation.MsBuildTaskTests.Setup() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Compilation\MsBuildTaskTests.cs:line 26
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.MsBuildTaskTests.OutputDirectory_ShouldSetDir" executed="True" result="Error" success="False" time="0.004" asserts="0">
                    <failure>
                      <message><![CDATA[SetUp : System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Compilation.MsBuildTaskTests.Setup() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Compilation\MsBuildTaskTests.cs:line 26
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.MsBuildTaskTests.ShouldSetConfiguration" executed="True" result="Error" success="False" time="0.007" asserts="0">
                    <failure>
                      <message><![CDATA[SetUp : System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Compilation.MsBuildTaskTests.Setup() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Compilation\MsBuildTaskTests.cs:line 26
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.MsBuildTaskTests.ShouldSetOutDir" executed="True" result="Error" success="False" time="0.011" asserts="0">
                    <failure>
                      <message><![CDATA[SetUp : System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Compilation.MsBuildTaskTests.Setup() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Compilation\MsBuildTaskTests.cs:line 26
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.MsBuildTaskTests.ShouldSetProperty" executed="True" result="Error" success="False" time="0.005" asserts="0">
                    <failure>
                      <message><![CDATA[SetUp : System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Compilation.MsBuildTaskTests.Setup() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Compilation\MsBuildTaskTests.cs:line 26
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.MsBuildTaskTests.ShouldSetSolutionPath" executed="True" result="Error" success="False" time="0.004" asserts="0">
                    <failure>
                      <message><![CDATA[SetUp : System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Compilation.MsBuildTaskTests.Setup() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Compilation\MsBuildTaskTests.cs:line 26
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.MsBuildTaskTests.ShouldSetTarget" executed="True" result="Error" success="False" time="0.004" asserts="0">
                    <failure>
                      <message><![CDATA[SetUp : System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Compilation.MsBuildTaskTests.Setup() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Compilation\MsBuildTaskTests.cs:line 26
]]></stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ResgenTests" executed="True" result="Failure" success="False" time="0.053" asserts="0">
                <results>
                  <test-case name="FluentBuild.Compilation.ResgenTests.GenerateFrom_ShouldPopulateFiles" executed="True" result="Error" success="False" time="0.050" asserts="0">
                    <failure>
                      <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at FluentBuild.Compilation.ResgenTests.GenerateFrom_ShouldPopulateFiles()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Compilation.ResgenTests.OutputTo_ShouldPopulatePathAndNotBeNull" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="FluentBuild.Compilation.ResgenTests.PrefixOutputsWith_ShouldSetPrefixProperly" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ResourceTests" executed="True" result="Success" success="True" time="0.003" asserts="0">
                <results>
                  <test-case name="FluentBuild.Compilation.ResourceTests.CreateShouldBuildProperly" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="FluentBuild.Compilation.ResourceTests.IfEmptyNameThenJustValueShouldBeReturned" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="FluentBuild.Compilation.ResourceTests.ShouldCreateQuotedString" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TargetTests" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <results>
                  <test-case name="FluentBuild.Compilation.TargetTests.CreateExe" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="FluentBuild.Compilation.TargetTests.CreateLibrary" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="FluentBuild.Compilation.TargetTests.CreateModule" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="FluentBuild.Compilation.TargetTests.CreateWindowsExe" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Core" executed="True" result="Success" success="True" time="0.081" asserts="0">
            <results>
              <test-suite type="TestFixture" name="AssemblyInfoTests" executed="True" result="Success" success="True" time="0.001" asserts="0">
                <results>
                  <test-case name="FluentBuild.Core.AssemblyInfoTests.MethodCallShouldNotThrowException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="BuildFileTests" executed="True" result="Success" success="True" time="0.009" asserts="0">
                <results>
                  <test-case name="FluentBuild.Core.BuildFileTests.BuildCountShouldBeCorrect" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                  <test-case name="FluentBuild.Core.BuildFileTests.TestThatQueueGetsProcessed" executed="True" result="Success" success="True" time="0.004" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MessageLoggerTests" executed="True" result="Success" success="True" time="0.058" asserts="0">
                <results>
                  <test-case name="FluentBuild.Core.MessageLoggerTests.SetLogger_ShouldSetLoggerToConsoleLogger" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                  <test-case name="FluentBuild.Core.MessageLoggerTests.SetLogger_ShouldSetLoggerToTeamCityLogger" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="FluentBuild.Core.MessageLoggerTests.SetLogger_ShouldThrowExceptionIfUnkownType" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                  <test-case name="FluentBuild.Core.MessageLoggerTests.UsingDebug_DebugLevelsSholdChange" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                  <test-case name="FluentBuild.Core.MessageLoggerTests.UsingDebug_ShouldOnlyWriteOneDebugMessage" executed="True" result="Success" success="True" time="0.008" asserts="0" />
                  <test-case name="FluentBuild.Core.MessageLoggerTests.WriteDebugMessage_ShouldNotWriteIfVerbosityIsLessThanFull" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                  <test-case name="FluentBuild.Core.MessageLoggerTests.WriteDebugMessage_ShouldWriteIfVerbosityIsFull" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="FluentBuild.Core.MessageLoggerTests.WriteError_ShouldWriteCustomPrefix" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="FluentBuild.Core.MessageLoggerTests.WriteError_ShouldWriteIfVerbosityIsNone" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="FluentBuild.Core.MessageLoggerTests.WriteHeader_ShouldNotWriteIfVerbosityIsNone" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="FluentBuild.Core.MessageLoggerTests.WriteHeader_ShouldWriteIfVerbosityIsFull" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                  <test-case name="FluentBuild.Core.MessageLoggerTests.WriteTestStarted_ShouldCallInternalLogger" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                  <test-case name="FluentBuild.Core.MessageLoggerTests.WriteWarning_ShouldWriteCustomPrefix" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PropertiesTests" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <results>
                  <test-case name="FluentBuild.Core.PropertiesTests.CommandLineShouldReturnProperObject" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="FluentBuild.Core.PropertiesTests.CruiseControlShouldReturnProperObject" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="FluentBuild.Core.PropertiesTests.CurrentDirectoryShouldBeProper" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="FluentBuild.Core.PropertiesTests.TeamCityShouldReturnProperObject" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PublishTests" executed="True" result="Success" success="True" time="0.001" asserts="0">
                <results>
                  <test-case name="FluentBuild.Core.PublishTests.ToGoogleCode" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Database" executed="True" result="Success" success="True" time="0.412" asserts="0">
            <results>
              <test-suite type="TestFixture" name="DatabaseTests" executed="True" result="Success" success="True" time="0.000" asserts="0">
                <results>
                  <test-case name="FluentBuild.Database.DatabaseTests.ShouldCreateProperObject" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MsSqlConnectionTests" executed="True" result="Success" success="True" time="0.361" asserts="0">
                <results>
                  <test-case name="FluentBuild.Database.MsSqlConnectionTests.ShouldCreateMsSqlUtilities" executed="True" result="Success" success="True" time="0.334" asserts="1" />
                  <test-case name="FluentBuild.Database.MsSqlConnectionTests.ShouldCreateMsSqlUtilitiesAndHaveEngineBuilt" executed="True" result="Success" success="True" time="0.025" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MsSqlCreateOrUpdateTests" executed="True" result="Success" success="True" time="0.027" asserts="0">
                <results>
                  <test-case name="FluentBuild.Database.MsSqlCreateOrUpdateTests.ShouldSetPropertyOnEngine" executed="True" result="Success" success="True" time="0.027" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MsSqlCreateTests" executed="True" result="Success" success="True" time="0.002" asserts="0">
                <results>
                  <test-case name="FluentBuild.Database.MsSqlCreateTests.ShouldSetPathOnEngine" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MsSqlUpdateTests" executed="True" result="Success" success="True" time="0.002" asserts="0">
                <results>
                  <test-case name="FluentBuild.Database.MsSqlUpdateTests.VersionTable_ShouldSetVersionOnEngine" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MsSqlUtilitiesTests" executed="True" result="Success" success="True" time="0.007" asserts="0">
                <results>
                  <test-case name="FluentBuild.Database.MsSqlUtilitiesTests.CreateOrUpdate_ShouldCreateProperType" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="FluentBuild.Database.MsSqlUtilitiesTests.DoesDatabaseAlreadyExist_ShouldCallUnderlyingEngine" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MsSqlVersionTableTests" executed="True" result="Success" success="True" time="0.002" asserts="0">
                <results>
                  <test-case name="FluentBuild.Database.MsSqlVersionTableTests.ExecuteShouldCallUnderlyingEngine" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="FrameworkFinders" executed="True" result="Success" success="True" time="0.037" asserts="0">
            <results>
              <test-suite type="TestFixture" name="DefaultFinderTests" executed="True" result="Success" success="True" time="0.037" asserts="0">
                <results>
                  <test-case name="FluentBuild.FrameworkFinders.DefaultFinderTests.FrameworkSearchPaths_ShouldReturnStringList" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                  <test-case name="FluentBuild.FrameworkFinders.DefaultFinderTests.PathToFrameworkInstall_ShouldReturnNullIfKeyNotFound" executed="True" result="Success" success="True" time="0.010" asserts="1" />
                  <test-case name="FluentBuild.FrameworkFinders.DefaultFinderTests.PathToFrameworkInstall_ShouldReturnValueIfKeyFound" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="FluentBuild.FrameworkFinders.DefaultFinderTests.PathToSDKInstall_ShouldReturnNullIfKeyNotFound" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="FluentBuild.FrameworkFinders.DefaultFinderTests.PathToSDKInstall_ShouldReturnValueIfKeyFound" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="FluentBuild.FrameworkFinders.DefaultFinderTests.SDKSearchPaths_ShouldReturnStringList" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="MessageLoggers" executed="True" result="Success" success="True" time="0.202" asserts="0">
            <results>
              <test-suite type="Namespace" name="ConsoleMessageLoggers" executed="True" result="Success" success="True" time="0.034" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ConsoleMessageLoggerTests" executed="True" result="Success" success="True" time="0.022" asserts="0">
                    <results>
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.ConsoleMessageLoggerTests.WrapText_ShouldHandleNewLines" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.ConsoleMessageLoggerTests.WrapText_ShouldHaveOneLine" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.ConsoleMessageLoggerTests.WrapText_ShouldHaveTwoLines" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.ConsoleMessageLoggerTests.WrapText_ShouldWrapShortHeader" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.ConsoleMessageLoggerTests.Write_ShouldCreateProperlyIndentedLines" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.ConsoleMessageLoggerTests.WriteDebug_ShouldWriteErrorMessage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.ConsoleMessageLoggerTests.WriteError_ShouldWriteErrorMessage" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.ConsoleMessageLoggerTests.WriteHeader" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.ConsoleMessageLoggerTests.WriteTestSuiteStarted_ShouldCreateTestSuiteObject" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.ConsoleMessageLoggerTests.WriteWarning_ShouldWriteMessage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TestLoggerTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                    <results>
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.TestLoggerTests.WriteMessage_ShouldNotAddDotsIfMessageIsTooLong" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.TestLoggerTests.WriteTestFailed_ShouldOutputTestFailedAndFinishedMessage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.TestLoggerTests.WriteTestIgnored_ShouldOutputTestIgnoredAndFinishedMessage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.TestLoggerTests.WriteTestPassed_ShouldOutputTestFinishedMessage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TestSuiteLoggerTests" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.TestSuiteLoggerTests.WriteFinished_ShouldNotWriteAnything" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.TestSuiteLoggerTests.WriteTestStarted_ShouldNotWriteAnything" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="FluentBuild.MessageLoggers.ConsoleMessageLoggers.TestSuiteLoggerTests.WriteTestSuiteStarted_ShouldWriteStartedMessage" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="MessageLoggerTests" executed="True" result="Success" success="True" time="0.015" asserts="0">
                <results>
                  <test-case name="FluentBuild.MessageLoggers.MessageLoggerTests.Debug_ShouldCreateMessage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="FluentBuild.MessageLoggers.MessageLoggerTests.Error_ShouldCreateMessage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="FluentBuild.MessageLoggers.MessageLoggerTests.EscapeCharacters_ShouldEscapeCharacters" executed="True" result="Success" success="True" time="0.003" asserts="5" />
                  <test-case name="FluentBuild.MessageLoggers.MessageLoggerTests.EscapeCharacters_ShouldNotEscapePipeRepeatedly" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="FluentBuild.MessageLoggers.MessageLoggerTests.Write_ShouldCreateMessage" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="FluentBuild.MessageLoggers.MessageLoggerTests.WriteHeader_ShouldCloseOldHeaderIfItExists" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="FluentBuild.MessageLoggers.MessageLoggerTests.WriteHeader_ShouldOpenNewHeaderIfNothingElseHasBeenOpened" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="FluentBuild.MessageLoggers.MessageLoggerTests.WriteTestSuiteStarted_ShouldCreateNewLoggingObject" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="FluentBuild.MessageLoggers.MessageLoggerTests.WriteWarning_ShouldCreateMessage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="MessageProcessing" executed="True" result="Success" success="True" time="0.130" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DefaultMessageProcessorTests" executed="True" result="Success" success="True" time="0.021" asserts="0">
                    <results>
                      <test-case name="FluentBuild.MessageLoggers.MessageProcessing.DefaultMessageProcessorTests.ShouldHaveAllMessagesAsErrorWhenProcessErrorCodeNonZero" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                      <test-case name="FluentBuild.MessageLoggers.MessageProcessing.DefaultMessageProcessorTests.ShouldHaveMessagesAsRegular" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="FluentBuild.MessageLoggers.MessageProcessing.DefaultMessageProcessorTests.ShouldHaveNonErrorAndErrorMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="FluentBuild.MessageLoggers.MessageProcessing.DefaultMessageProcessorTests.ShouldHaveWarningLine" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="FluentBuild.MessageLoggers.MessageProcessing.DefaultMessageProcessorTests.ShouldNotProcessUnkownErrorType" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                      <test-case name="FluentBuild.MessageLoggers.MessageProcessing.DefaultMessageProcessorTests.ShouldProcessErrorMessage" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                      <test-case name="FluentBuild.MessageLoggers.MessageProcessing.DefaultMessageProcessorTests.ShouldProcessRegularMessage" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                      <test-case name="FluentBuild.MessageLoggers.MessageProcessing.DefaultMessageProcessorTests.ShouldProcessWarningMessage" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NunitMessageProcessorTests" executed="True" result="Success" success="True" time="0.108" asserts="0">
                    <results>
                      <test-case name="FluentBuild.MessageLoggers.MessageProcessing.NunitMessageProcessorTests.DisplayShouldLogTestSuiteStartedAndFinished" executed="True" result="Success" success="True" time="0.104" asserts="0" />
                      <test-case name="FluentBuild.MessageLoggers.MessageProcessing.NunitMessageProcessorTests.ParseTime_ShouldParseTimeFormat" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="FluentBuild.MessageLoggers.MessageProcessing.NunitMessageProcessorTests.ProcessTestSuite" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[I don't know why this is breaking]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="TeamCityMessageLoggers" executed="True" result="Success" success="True" time="0.011" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="TestMessageLoggerTests" executed="True" result="Success" success="True" time="0.005" asserts="0">
                    <results>
                      <test-case name="FluentBuild.MessageLoggers.TeamCityMessageLoggers.TestMessageLoggerTests.WriteTestFailed_ShouldOutputTestFailedAndFinishedMessage" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="FluentBuild.MessageLoggers.TeamCityMessageLoggers.TestMessageLoggerTests.WriteTestIgnored_ShouldOutputTestIgnoredAndFinishedMessage" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="FluentBuild.MessageLoggers.TeamCityMessageLoggers.TestMessageLoggerTests.WriteTestPassed_ShouldOutputTestFinishedMessage" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TestSuiteMessageLoggerTests" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <results>
                      <test-case name="FluentBuild.MessageLoggers.TeamCityMessageLoggers.TestSuiteMessageLoggerTests.WriteFinished_ShouldWriteFinishedMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="FluentBuild.MessageLoggers.TeamCityMessageLoggers.TestSuiteMessageLoggerTests.WriteTestStarted_ShouldWriteStartedMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="FluentBuild.MessageLoggers.TeamCityMessageLoggers.TestSuiteMessageLoggerTests.WriteTestSuiteStarted_ShouldWriteStartedMessage" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Publishing" executed="True" result="Success" success="True" time="0.198" asserts="0">
            <results>
              <test-suite type="TestFixture" name="GoogleCodeTests" executed="True" result="Success" success="True" time="0.198" asserts="0">
                <results>
                  <test-case name="FluentBuild.Publishing.GoogleCodeTests.CreateAuthorizationToken_ShouldNotFail" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                  <test-case name="FluentBuild.Publishing.GoogleCodeTests.CreateRequest_ShouldBuildRequest" executed="True" result="Success" success="True" time="0.192" asserts="2" />
                  <test-case name="FluentBuild.Publishing.GoogleCodeTests.Validate_ShouldNotThrowException" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="FluentBuild.Publishing.GoogleCodeTests.ValidateString_ShouldThrowExceptionWhenStringIsEmpty" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Runners" executed="True" result="Failure" success="False" time="0.316" asserts="0">
            <results>
              <test-suite type="TestFixture" name="ExecutableFailedExceptionTests" executed="True" result="Success" success="True" time="0.001" asserts="0">
                <results>
                  <test-case name="FluentBuild.Runners.ExecutableFailedExceptionTests.ShouldPopulateMessage" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ILMergeTests" executed="True" result="Failure" success="False" time="0.044" asserts="0">
                <results>
                  <test-case name="FluentBuild.Runners.ILMergeTests.AddBuildArtifactSource_ShouldSetSource" executed="True" result="Error" success="False" time="0.018" asserts="0">
                    <failure>
                      <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at FluentBuild.Runners.ILMergeTests.AddBuildArtifactSource_ShouldSetSource()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Runners.ILMergeTests.AddSource_ShouldSetSource" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="FluentBuild.Runners.ILMergeTests.BuildArgs_ShouldBuildArgs" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                  <test-case name="FluentBuild.Runners.ILMergeTests.BuildArgs_ShouldSetFrameworkTypeIfFrameworkIsDotNet4" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                  <test-case name="FluentBuild.Runners.ILMergeTests.FindExecutable_ShouldAutoFindIfNotSet" executed="True" result="Success" success="True" time="0.006" asserts="0" />
                  <test-case name="FluentBuild.Runners.ILMergeTests.FindExecutable_ShouldThrowExecptionIfItCantBeFound" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="FluentBuild.Runners.ILMergeTests.FindExecutable_ShouldUseSetArg" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="FluentBuild.Runners.ILMergeTests.OutputTo_ShouldOutpt" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="FluentBuild.Runners.ILMergeTests.OutputToWithBuildArtifact_ShouldOutpt" executed="True" result="Error" success="False" time="0.005" asserts="0">
                    <failure>
                      <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at FluentBuild.Runners.ILMergeTests.OutputToWithBuildArtifact_ShouldOutpt()
]]></stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="UnitTesting" executed="True" result="Failure" success="False" time="0.256" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="NUnitRunnerTests" executed="True" result="Failure" success="False" time="0.255" asserts="0">
                    <results>
                      <test-case name="FluentBuild.Runners.UnitTesting.NUnitRunnerTests.AddParameter_ShouldAddToInteralDictionary" executed="True" result="Error" success="False" time="0.043" asserts="0">
                        <failure>
                          <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                          <stack-trace><![CDATA[at FluentBuild.Utilities.FileFinder..ctor()
at FluentBuild.Runners.UnitTesting.NUnitRunner..ctor() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunner.cs:line 86
at FluentBuild.Runners.UnitTesting.NUnitRunnerTests.AddParameter_ShouldAddToInteralDictionary() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunnerTests.cs:line 72
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="FluentBuild.Runners.UnitTesting.NUnitRunnerTests.AddSingleParameter_ShouldAddToInteralDictionary" executed="True" result="Error" success="False" time="0.009" asserts="0">
                        <failure>
                          <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                          <stack-trace><![CDATA[at FluentBuild.Utilities.FileFinder..ctor()
at FluentBuild.Runners.UnitTesting.NUnitRunner..ctor() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunner.cs:line 86
at FluentBuild.Runners.UnitTesting.NUnitRunnerTests.AddSingleParameter_ShouldAddToInteralDictionary() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunnerTests.cs:line 61
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="FluentBuild.Runners.UnitTesting.NUnitRunnerTests.BuildArgs_ShouldConstructWithFileToTest" executed="True" result="Error" success="False" time="0.008" asserts="0">
                        <failure>
                          <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                          <stack-trace><![CDATA[at FluentBuild.Utilities.FileFinder..ctor()
at FluentBuild.Runners.UnitTesting.NUnitRunner..ctor() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunner.cs:line 86
at FluentBuild.Runners.UnitTesting.NUnitRunnerTests.BuildArgs_ShouldConstructWithFileToTest() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunnerTests.cs:line 85
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="FluentBuild.Runners.UnitTesting.NUnitRunnerTests.BuildArgs_ShouldConstructWithFileToTestAndNameValueParameter" executed="True" result="Error" success="False" time="0.008" asserts="0">
                        <failure>
                          <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                          <stack-trace><![CDATA[at FluentBuild.Utilities.FileFinder..ctor()
at FluentBuild.Runners.UnitTesting.NUnitRunner..ctor() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunner.cs:line 86
at FluentBuild.Runners.UnitTesting.NUnitRunnerTests.BuildArgs_ShouldConstructWithFileToTestAndNameValueParameter() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunnerTests.cs:line 107
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="FluentBuild.Runners.UnitTesting.NUnitRunnerTests.BuildArgs_ShouldConstructWithFileToTestAndSingleParameter" executed="True" result="Error" success="False" time="0.009" asserts="0">
                        <failure>
                          <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                          <stack-trace><![CDATA[at FluentBuild.Utilities.FileFinder..ctor()
at FluentBuild.Runners.UnitTesting.NUnitRunner..ctor() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunner.cs:line 86
at FluentBuild.Runners.UnitTesting.NUnitRunnerTests.BuildArgs_ShouldConstructWithFileToTestAndSingleParameter() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunnerTests.cs:line 96
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="FluentBuild.Runners.UnitTesting.NUnitRunnerTests.Execute_ShouldCallExecuteMethodOnMock" executed="True" result="Error" success="False" time="0.007" asserts="0">
                        <failure>
                          <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                          <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Runners.UnitTesting.NUnitRunnerTests.Execute_ShouldCallExecuteMethodOnMock() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunnerTests.cs:line 117
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="FluentBuild.Runners.UnitTesting.NUnitRunnerTests.Execute_ShouldSetOnErrorStateToFalse" executed="True" result="Error" success="False" time="0.007" asserts="0">
                        <failure>
                          <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                          <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Runners.UnitTesting.NUnitRunnerTests.Execute_ShouldSetOnErrorStateToFalse() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunnerTests.cs:line 140
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="FluentBuild.Runners.UnitTesting.NUnitRunnerTests.Execute_ShouldSetOnErrorStateToTrue" executed="True" result="Error" success="False" time="0.007" asserts="0">
                        <failure>
                          <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                          <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Runners.UnitTesting.NUnitRunnerTests.Execute_ShouldSetOnErrorStateToTrue() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunnerTests.cs:line 163
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="FluentBuild.Runners.UnitTesting.NUnitRunnerTests.Execute_ShouldSetWorkingDirectoryOnMockIfManuallySpecifiedInCode" executed="True" result="Error" success="False" time="0.007" asserts="0">
                        <failure>
                          <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                          <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Runners.UnitTesting.NUnitRunnerTests.Execute_ShouldSetWorkingDirectoryOnMockIfManuallySpecifiedInCode() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunnerTests.cs:line 188
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="FluentBuild.Runners.UnitTesting.NUnitRunnerTests.Execute_ShouldThrowExceptionIfPathToExeNotSetAndCanNotBeFound" executed="True" result="Success" success="True" time="0.005" asserts="0" />
                      <test-case name="FluentBuild.Runners.UnitTesting.NUnitRunnerTests.Execute_ShouldTryToFindPathToNunitIfNotSet" executed="True" result="Error" success="False" time="0.008" asserts="0">
                        <failure>
                          <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                          <stack-trace><![CDATA[at System.Signature.GetSignature(SignatureStruct& signature, Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)
at System.Reflection.RuntimeMethodInfo.get_Signature()
at System.Reflection.RuntimeMethodInfo.GetParameters()
at Castle.DynamicProxy.Generators.MethodSignatureComparer.GetHashCode(MethodInfo obj)
at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)
at System.Collections.Generic.Dictionary`2.ContainsKey(TKey key)
at Castle.DynamicProxy.Generators.MethodFinder.RemoveDuplicates(MethodInfo[] infos)
at Castle.DynamicProxy.Generators.MethodFinder.GetAllInstanceMethods(Type type, BindingFlags flags)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethods(ArrayList methodsList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsToProxy(ArrayList methodList, Type type, Boolean onlyVirtuals)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, Boolean onlyVirtuals, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.BaseProxyGenerator.CollectMethodsAndProperties(ClassEmitter emitter, Type targetType, PropertyToGenerate[]& propsToGenerate, EventToGenerate[]& eventsToGenerate)
at Castle.DynamicProxy.Generators.InterfaceProxyWithTargetGenerator.GenerateCode(Type proxyTargetType, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.DefaultProxyBuilder.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyTypeWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, ProxyGenerationOptions options, IInterceptor[] interceptors)
at Castle.DynamicProxy.ProxyGenerator.CreateInterfaceProxyWithoutTarget(Type theInterface, Type[] interfaces, IInterceptor[] interceptors)
at Rhino.Mocks.MockRepository.MockInterface(CreateMockState mockStateFactory, Type type, Type[] extras)
at Rhino.Mocks.MockRepository.CreateMockObject(Type type, CreateMockState factory, Type[] extras, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.Stub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub(Type type, Object[] argumentsForConstructor)
at Rhino.Mocks.MockRepository.GenerateStub[T](Object[] argumentsForConstructor)
at FluentBuild.Runners.UnitTesting.NUnitRunnerTests.Execute_ShouldTryToFindPathToNunitIfNotSet() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunnerTests.cs:line 212
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="FluentBuild.Runners.UnitTesting.NUnitRunnerTests.FileToTest_ShouldPopulateInternalFieldAndReturnSelf" executed="True" result="Error" success="False" time="0.009" asserts="0">
                        <failure>
                          <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                          <stack-trace><![CDATA[at FluentBuild.Utilities.FileFinder..ctor()
at FluentBuild.Runners.UnitTesting.NUnitRunner..ctor() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunner.cs:line 86
at FluentBuild.Runners.UnitTesting.NUnitRunnerTests.FileToTest_ShouldPopulateInternalFieldAndReturnSelf() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunnerTests.cs:line 28
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="FluentBuild.Runners.UnitTesting.NUnitRunnerTests.PathToConsoleRunner_ShouldPopulateInternalFieldAndReturnSelf" executed="True" result="Error" success="False" time="0.008" asserts="0">
                        <failure>
                          <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                          <stack-trace><![CDATA[at FluentBuild.Utilities.FileFinder..ctor()
at FluentBuild.Runners.UnitTesting.NUnitRunner..ctor() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunner.cs:line 86
at FluentBuild.Runners.UnitTesting.NUnitRunnerTests.PathToConsoleRunner_ShouldPopulateInternalFieldAndReturnSelf() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunnerTests.cs:line 39
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="FluentBuild.Runners.UnitTesting.NUnitRunnerTests.WorkingDirectory_ShouldPopulateInternalFieldAndReturnSelf" executed="True" result="Error" success="False" time="0.009" asserts="0">
                        <failure>
                          <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                          <stack-trace><![CDATA[at FluentBuild.Utilities.FileFinder..ctor()
at FluentBuild.Runners.UnitTesting.NUnitRunner..ctor() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunner.cs:line 86
at FluentBuild.Runners.UnitTesting.NUnitRunnerTests.WorkingDirectory_ShouldPopulateInternalFieldAndReturnSelf() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunnerTests.cs:line 17
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="FluentBuild.Runners.UnitTesting.NUnitRunnerTests.XmlOutputTo_ShouldPopulatePropertiesAndReturnSelf" executed="True" result="Error" success="False" time="0.011" asserts="0">
                        <failure>
                          <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                          <stack-trace><![CDATA[at FluentBuild.Utilities.FileFinder..ctor()
at FluentBuild.Runners.UnitTesting.NUnitRunner..ctor() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunner.cs:line 86
at FluentBuild.Runners.UnitTesting.NUnitRunnerTests.XmlOutputTo_ShouldPopulatePropertiesAndReturnSelf() in c:\Users\Kudos\Desktop\fluent-build\src\FluentBuild\Runners\UnitTesting\NUnitRunnerTests.cs:line 50
]]></stack-trace>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Zip" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ZipCompressTests" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="FluentBuild.Runners.Zip.ZipCompressTests.TestSomething" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ZipTests" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="FluentBuild.Runners.Zip.ZipTests.TestSomething" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="Utilities" executed="True" result="Failure" success="False" time="0.101" asserts="0">
            <results>
              <test-suite type="TestFixture" name="ExecutableTests" executed="True" result="Failure" success="False" time="0.013" asserts="0">
                <results>
                  <test-case name="FluentBuild.Utilities.ExecutableTests.CreateProcess_Should_Build_Process" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                  <test-case name="FluentBuild.Utilities.ExecutableTests.Executable_ShouldSetProperly" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="FluentBuild.Utilities.ExecutableTests.ShouldConstructProperly" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="FluentBuild.Utilities.ExecutableTests.ShouldPopulateWorkingDirectoryViaArtifact" executed="True" result="Error" success="False" time="0.004" asserts="0">
                    <failure>
                      <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at FluentBuild.Utilities.ExecutableTests.ShouldPopulateWorkingDirectoryViaArtifact()
]]></stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="FileFinderTests" executed="True" result="Failure" success="False" time="0.010" asserts="0">
                <results>
                  <test-case name="FluentBuild.Utilities.FileFinderTests.Find_ShouldSearchFileSystem" executed="True" result="Error" success="False" time="0.005" asserts="0">
                    <failure>
                      <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at FluentBuild.Utilities.FileFinderTests.Find_ShouldSearchFileSystem()
]]></stack-trace>
                    </failure>
                  </test-case>
                  <test-case name="FluentBuild.Utilities.FileFinderTests.Find_ShouldSearchFileSystemRecursively" executed="True" result="Error" success="False" time="0.004" asserts="0">
                    <failure>
                      <message><![CDATA[System.IO.FileNotFoundException : Could not load file or assembly 'FluentFs, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.]]></message>
                      <stack-trace><![CDATA[at FluentBuild.Utilities.FileFinderTests.Find_ShouldSearchFileSystemRecursively()
]]></stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="FrameworkVersionTests" executed="True" result="Success" success="True" time="0.029" asserts="0">
                <results>
                  <test-case name="FluentBuild.Utilities.FrameworkVersionTests.GetPathToFrameworkInstall_ShouldNotThrowException" executed="True" result="Success" success="True" time="0.020" asserts="0" />
                  <test-case name="FluentBuild.Utilities.FrameworkVersionTests.GetPathToFrameworkInstall_ShouldThrowExceptionIfNotFound" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                  <test-case name="FluentBuild.Utilities.FrameworkVersionTests.GetPathToSdk_ShouldNotThrowException" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                  <test-case name="FluentBuild.Utilities.FrameworkVersionTests.GetPathToSdk_ShouldThrowExceptionIfNoSdkFound" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RegistryKeyValueFinderTests" executed="True" result="Success" success="True" time="0.037" asserts="0">
                <results>
                  <test-case name="FluentBuild.Utilities.RegistryKeyValueFinderTests.ShouldOpenLocalMachineKeyForSoftwareTwice" executed="True" result="Success" success="True" time="0.037" asserts="0" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>