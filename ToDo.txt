Build
  Completed
	-Message logger wrapping needs to handle when input has newline characters in it.
	-Team City support added.
	-Compiled for .NET 3.5 for better compatability


  This release    

    -ILmerge needs to know what version it is running on (i.e. v4,v3,v2, etc)
    -Better testing on filesets
    -ILmerge testing
	-CCNet support

  Next Release
  	-Add BuildArtifact.Move
	-Add BuildFolder.Copy / .Move
		
  Future Releases
    -Allow message verbosity to be changed from TeamCity
	-MS Team build support
    -Build.dll should be output to a temp folder instead of current folder
    -If tests are marked as Ignore() for too long then fail build
	-Xml MessageLogger
    -Sandcastle generator
    -Ability to change default console colors
	-CustomFrameworkVersion
    -version check that runs in the background and alerts on next run
    -Token replacement should allow you to specify the delimiter around the token.
	-Add in architecture detection
	-Zip might want to be Run.Zip.Compress.On(buildArtifact/BuildFolder).OutputTo(dest.zip)
	-BuildArtifact.Execute().WithArgs()....etc. may be nice
	-ability to specify (or detect) compiler to use for build files (current default is c#)
	-ability to reference (or detect) other assemblies in the build file
	-Script to convert nant files to the start of a fluent build file (there is a really rough one in the source repository).
		IDEA: use the nant code base to parse the nant file and then inspect the objects to generate the FluentBuild file.
	-Security Audit functionality build in. Check release build, custom errors, compilation debug=false, trace off, identity element containing password, connection strings (in any element including sessionState) should not have a password, warn on trust level not being set?
	-May want to hide classes outside of core namespace from intellisense to help make things clearer. [Browsable(false)] & [EditorBrowsable(EditorBrowsableState.Never)]
	-Add in support for publishing to GoogleCode/CodePlex/SourceForge/Etc.
	-It would be nice to have zip be able to output to the folder containing source. I.e. zip("c:\\temp\\).OutputTo("c:\\temp\\out.zip"). 
	-For MSBuild might want to have Configuration.Debug .Release .Custom("myconfig")
	-CopyBuildArtifact may want to have it return a new BuildArtifact with the folder.
	-BuildFile.InvokeNextTask: maybe this should be private and then invoked via reflection from fb.exe (or else internalVisibleTo) to prevent users from running it
	-Click once deployment manifest writing
    -MessageLogger: see if it can be detected by checking the standard handle (apparently 7) vs the current handle
	-Gather usage data of functions used/success rates/ etc. Maybe have fb.exe and fb-nousagestats.exe

Database
-Have a local sql file folder that merges the changes in so you don't run your own SQL scripts on your own DB.
i.e. scripts/
			Create
			Update
			ToMerge
			
-undo scripts?
-sql script may want to get the changeset version number preprended so that conflicts don't occur 
	(i.e. I name my file 0001_helloWorld.sql and another dev names his 0001_dropDAtabase.sql which one runs first?)
-input validation on variables for potential SQL / Filesystem injection
