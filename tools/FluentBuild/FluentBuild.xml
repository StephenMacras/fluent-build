<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentBuild</name>
    </assembly>
    <members>
        <member name="T:FluentBuild.Compilation.Target">
            <summary>
            Determines the type of assembly to build
            </summary>
        </member>
        <member name="P:FluentBuild.Compilation.Target.Library">
            <summary>
            Builds a library assembly (i.e. a dll)
            </summary>
        </member>
        <member name="P:FluentBuild.Compilation.Target.WindowsExecutable">
            <summary>
            Builds a windows executable
            </summary>
        </member>
        <member name="P:FluentBuild.Compilation.Target.Executable">
            <summary>
            Builds a console application
            </summary>
        </member>
        <member name="P:FluentBuild.Compilation.Target.Module">
            <summary>
            Builds a module
            </summary>
        </member>
        <member name="T:FluentBuild.AssemblyInfoBuilding.AssemblyInfoDetails">
            <summary>
            Sets the lines for an assembly info file
            </summary>
        </member>
        <member name="M:FluentBuild.AssemblyInfoBuilding.AssemblyInfoDetails.Import(System.String[])">
            <summary>
            Import a namespace. Will generate a using namespace; in C# and imports namespace in VB
            </summary>
            <param name="namespaces">The namespaces to import</param>
            <remarks>Duplicate namespace imports will be automatically ignored</remarks>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.AssemblyInfoBuilding.AssemblyInfoDetails.ComVisible(System.Boolean)">
            <summary>
            Explicitly states if this assembly is visible to COM clients. 
            If the attribute is missing then the assembly is COM visible.
            </summary>
            <param name="visible">sets com visibility</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.AssemblyInfoBuilding.AssemblyInfoDetails.ClsCompliant(System.Boolean)">
            <summary>
            States if the assembly is CLS Compliant. CLS compliant means that all classes only
            expose features that are common accross all .NET languages.
            </summary>
            <remarks>
            Things that make an assembly non-cls compliant:
            Exposing unsigned types.
            Unsafe types (e.g. pointers) should not be exposed.
            Operators should not be overloaded
            Two types or methods should not be included that differ only by case. e.g. doWork and DOWORK.
            </remarks>
            <param name="compliant">sets cls compliant</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.AssemblyInfoBuilding.AssemblyInfoDetails.Version(System.String)">
            <summary>
            Sets the assembly version.
            </summary>
            <param name="value">a version in the format of Major.Minor.[Build].[Revision]</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.AssemblyInfoBuilding.AssemblyInfoDetails.Title(System.String)">
            <summary>
            Sets the title attribute of the assembly
            </summary>
            <param name="value">The title to use</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.AssemblyInfoBuilding.AssemblyInfoDetails.Description(System.String)">
            <summary>
            Sets the description attribute of the assembly
            </summary>
            <param name="value">The description to set</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.AssemblyInfoBuilding.AssemblyInfoDetails.Copyright(System.String)">
            <summary>
            Sets the copyright attribute of the assembly
            </summary>
            <param name="value">The copyright to set</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.AssemblyInfoBuilding.AssemblyInfoDetails.Company(System.String)">
            <summary>
            Sets the company attribute of the assembly
            </summary>
            <param name="value">The company to set</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.AssemblyInfoBuilding.AssemblyInfoDetails.Product(System.String)">
            <summary>
            Sets the product attribute of the assembly
            </summary>
            <param name="value">The product to set</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.AssemblyInfoBuilding.AssemblyInfoDetails.OutputTo(FluentBuild.Core.BuildArtifact)">
            <summary>
            Execute the generation of the assembly info file and output it.
            </summary>
            <param name="artifactLocation">The destination artifact location</param>
        </member>
        <member name="M:FluentBuild.AssemblyInfoBuilding.AssemblyInfoDetails.OutputTo(System.String)">
            <summary>
            Execute the generation of the assembly info file and output it.
            </summary>
            <param name="artifactLocation">The destination file path location</param>
        </member>
        <member name="M:FluentBuild.Runners.UnitTesting.NUnitRunner.PathToNunitConsoleRunner(System.String)">
            <summary>
            Manually sets the path to nunit-console.exe. If this is not set then the runner will try and find the file on its own by searching the current folder and its subfolders.
            </summary>
            <param name="path">Path to nunit-console.exe</param>
            <returns></returns>
        </member>
        <member name="T:FluentBuild.Core.BuildFile">
            <summary>
             Represents a Build file that can be run
            </summary>
        </member>
        <member name="M:FluentBuild.Core.BuildFile.InvokeNextTask">
            TODO: maybe this should be private and then invoked via reflection from fb.exe (or else internalVisibleTo)
            <summary>
             Invokes the next task in the queue
            </summary>
        </member>
        <member name="M:FluentBuild.Core.BuildFile.#ctor">
            <summary>
             Instantiates a build file and initializes the Tasks queue.
            </summary>
        </member>
        <member name="M:FluentBuild.Core.BuildFile.AddTask(System.Action)">
            <summary>
             Adds a task for fb.exe to run in the order that it should be run
            </summary>
            <param name="task">The method to run</param>
        </member>
        <member name="M:FluentBuild.Core.BuildFile.TaskCount">
            <summary>
             Gets the number of tasks in the queue.
            </summary>
            <returns>The number of tasks in the queue</returns>
        </member>
        <member name="T:FluentBuild.Compilation.Resource">
            <summary>
             Represents a resource file
            </summary>
        </member>
        <member name="M:FluentBuild.Compilation.Resource.#ctor(System.String,System.String)">
            <summary>
             Creates a Resource for a file with a given identifier
            </summary>
            <param name="filePath">The path to the resource file</param>
            <param name="identifier">The identifier to be used during compilation</param>
        </member>
        <member name="M:FluentBuild.Compilation.Resource.#ctor(System.String)">
            <summary>
             Creates a Resource for a file
            </summary>
            <param name="filePath">The path to the resource file</param>
        </member>
        <member name="M:FluentBuild.Compilation.Resource.ToString">
            <summary>
            Creates a string representation of the path and identifier
            </summary>
            <returns>A string in the format of filePath[,identifier]</returns>
        </member>
        <member name="T:FluentBuild.Core.BuildArtifact">
            <summary>
             Represents a file used or created in a build
            </summary>
        </member>
        <member name="M:FluentBuild.Core.BuildArtifact.#ctor(System.String)">
            <summary>
            </summary>
            <param name="path">Path to the file</param>
        </member>
        <member name="M:FluentBuild.Core.BuildArtifact.Delete">
            <summary>
             Deletes the file 
            <remarks>If the file does not exist no error will be thrown (even if OnError is set to fail)</remarks>
            </summary>
        </member>
        <member name="M:FluentBuild.Core.BuildArtifact.Delete(FluentBuild.Utilities.OnError)">
            <summary>
             Deletes the file 
            <remarks>If the file does not exist no error will be thrown (even if OnError is set to fail)</remarks>
             <param name="onError">Sets wether to fail or continue if an error occurs</param>
            </summary>
        </member>
        <member name="M:FluentBuild.Core.BuildArtifact.ToString">
            <summary>
            
            </summary>
            <returns>The build artifact path</returns>
        </member>
        <member name="P:FluentBuild.Core.BuildArtifact.Rename">
            <summary>
            Renames the artifact
            </summary>
        </member>
        <member name="P:FluentBuild.Core.BuildArtifact.Copy">
            <summary>
            Copies the artifact
            </summary>
        </member>
        <member name="M:FluentBuild.Utilities.IWindowsSdkFinder.IsWindowsSdkInstalled">
            <summary>
            Determines if the Windows SDK is installed by checking for the existance of the SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows registry key
            </summary>
            <returns>true if the key is found and false if the key is not found</returns>
        </member>
        <member name="M:FluentBuild.Utilities.IWindowsSdkFinder.PathToHighestVersionedSdk">
            <summary>
            Finds the highest SDK version installed via its registry key
            </summary>
            <returns>The path to the hisghest SDK version</returns>
        </member>
        <member name="T:FluentBuild.Utilities.WindowsSdkFinder">
            <summary>
            A Utility class that is used to locate the Windows SDK so that the appropriate compiler can be run
            </summary>
        </member>
        <member name="M:FluentBuild.Utilities.WindowsSdkFinder.IsWindowsSdkInstalled">
            <summary>
            Determines if the Windows SDK is installed by checking for the existance of the SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows registry key
            </summary>
            <returns>true if the key is found and false if the key is not found</returns>
        </member>
        <member name="M:FluentBuild.Utilities.WindowsSdkFinder.PathToHighestVersionedSdk">
            <summary>
            Finds the highest SDK version installed via its registry key
            </summary>
            <returns>The path to the hisghest SDK version</returns>
        </member>
        <member name="T:FluentBuild.Core.Run">
            <summary>
            Runs an execuable. It may later be expaned to have other run tasks (e.g. nunit, code analysis, etc.)
            </summary>
        </member>
        <member name="M:FluentBuild.Core.Run.Executeable(System.String)">
            <summary>
            Creates an Executable object based on a string path
            </summary>
            <param name="executeablePath">Path to the executable</param>
            <returns>an Executable object</returns>
        </member>
        <member name="M:FluentBuild.Core.Run.Executeable(FluentBuild.Core.BuildArtifact)">
            <summary>
            Builds an Executable object based on a build artifact
            </summary>
            <param name="executeablePath">The build artifact</param>
            <returns>an Executable object</returns>
        </member>
        <member name="T:FluentBuild.Utilities.RegistryWrapper">
            <summary>
            Wrapper around registry access to provide testability
            </summary>
        </member>
        <member name="T:FluentBuild.Utilities.ConsoleColor">
            <summary>
            Sets the color of the console to support colorized output
            </summary>
        </member>
        <member name="T:FluentBuild.Compilation.MsBuildTask">
            <summary>
             Executes MsBuild to create an assembly (or multiple assemblies)
            </summary>
        </member>
        <member name="M:FluentBuild.Compilation.MsBuildTask.AddTarget(System.String)">
            <summary>
             Adds a target to run
            </summary>
            <param name="target">A target that exists in your msbuild file</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Compilation.MsBuildTask.SetProperty(System.String,System.String)">
            <summary>
            Sets a property that is passed to msbuild.exe
            </summary>
            <param name="name">the name of the property to set</param>
            <param name="value">the value of the property</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Compilation.MsBuildTask.OutputDirectory(System.String)">
            <summary>
             Sets the output directory for the msbuild task
            </summary>
             <remarks>Sets the OutDir property (i.e. /p:OutDir)</remarks>
            <param name="path">the output folder</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Compilation.MsBuildTask.OutputDirectory(FluentBuild.Core.BuildFolder)">
            <summary>
             Sets the output directory for the msbuild task
            </summary>
             <remarks>Sets the OutDir property (i.e. /p:OutDir)</remarks>
            <param name="path">the output folder</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Compilation.MsBuildTask.Configuration(System.String)">
            <summary>
             Sets the configuration to use for the msbuild task
            </summary>
             <remarks>Sets the configuration property (i.e. /p:Configuration)</remarks>
            <param name="configuration">The configuration to use (e.g. Debug, Release, Custom)</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Compilation.MsBuildTask.Execute">
            <summary>
             Executes MSBuild with the provided parameters
            </summary>
        </member>
        <member name="T:FluentBuild.Core.AssemblyInfo">
            <summary>
            Allows the creation of assembly info files
            </summary>
        </member>
        <member name="P:FluentBuild.Core.AssemblyInfo.Language">
            <summary>
            select the language used to generate the assembly info file
            </summary>
        </member>
        <member name="T:FluentBuild.Core.Defaults">
            <summary>
             Defaults for the fluent build runner
            </summary>
        </member>
        <member name="F:FluentBuild.Core.Defaults.OnError">
            <summary>
             Sets the behavior of what to do when an error occurs. The default is to fail.
            </summary>
        </member>
        <member name="F:FluentBuild.Core.Defaults.FrameworkVersion">
            <summary>
             Sets the .NET Framework version to use. The default is .NET 4.0
            </summary>
        </member>
        <member name="T:FluentBuild.Core.Build">
            <summary>
             Builds an assembly
            </summary>
        </member>
        <member name="M:FluentBuild.Core.Build.UsingMsBuild(System.String)">
            <summary>
            Creates a BuildTask using MSBuild
            </summary>
        </member>
        <member name="P:FluentBuild.Core.Build.UsingCsc">
            <summary>
            Creates a BuildTask using the C# compiler
            </summary>
        </member>
        <member name="P:FluentBuild.Core.Build.UsingVbc">
            <summary>
            Creates a BuildTask using the VB compiler
            </summary>
        </member>
        <member name="P:FluentBuild.AssemblyInfoBuilding.AssemblyInfoLanguage.CSharp">
            <summary>
            Generate using C#
            </summary>
        </member>
        <member name="P:FluentBuild.AssemblyInfoBuilding.AssemblyInfoLanguage.VisualBasic">
            <summary>
            Generate using Visual Basic
            </summary>
        </member>
        <member name="T:FluentBuild.Compilation.BuildTask">
            <summary>
             A task around builds that will execute a compiler to generate an assembly.
            </summary>
        </member>
        <member name="M:FluentBuild.Compilation.BuildTask.OutputFileTo(System.String)">
            <summary>
            Sets the output file location
            </summary>
            <param name="outputFileLocation">The path to output the file to</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Compilation.BuildTask.OutputFileTo(FluentBuild.Core.BuildArtifact)">
            <summary>
            Sets the output file location
            </summary>
            <param name="artifact">The BuildArtifact to output the file to</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Compilation.BuildTask.AddRefences(System.String[])">
            <summary>
            Adds a reference to be included in the build
            </summary>
            <param name="fileNames">a param array of string paths to the reference</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Compilation.BuildTask.AddRefences(FluentBuild.Core.BuildArtifact[])">
            <summary>
            Adds a reference to be included in the build
            </summary>
            <param name="artifacts">a param array of BuildArtifacts to the reference</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Compilation.BuildTask.AddResource(System.String)">
            <summary>
            Adds a single resource to be included in the build
            </summary>
            <param name="fileName">a resource file to include</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Compilation.BuildTask.AddResource(System.String,System.String)">
            <summary>
            Adds a single resource to be included in the build
            </summary>
            <param name="fileName">a resource file to include</param>
            <param name="identifier">the identifier that code uses to refer to the resource</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Compilation.BuildTask.AddResources(FluentBuild.Core.FileSet)">
            <summary>
             Adds a fileset of resources to be included in the build
            </summary>
            <param name="fileSet">The fileset containing the resouces</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Compilation.BuildTask.Execute">
            <summary>
             Executes the compliation with the provided parameters
            </summary>
        </member>
        <member name="M:FluentBuild.Compilation.BuildTask.AddSources(FluentBuild.Core.FileSet)">
            <summary>
            Adds in the source files to compile. This method is additive. It can be called multiple times without issue.
            </summary>
            <param name="fileset">A FileSet containing the files to be compiled.</param>
            <returns></returns>
        </member>
        <member name="P:FluentBuild.Compilation.BuildTask.Target">
            <summary>
            Set the output file type
            </summary>
        </member>
        <member name="P:FluentBuild.Compilation.BuildTask.IncludeDebugSymbols">
            <summary>
            Sets if Debug Symbols are generated. Defaults to False.
            </summary>
        </member>
        <member name="M:FluentBuild.FilesAndDirectories.CopyBuildArtifcat.ReplaceToken(System.String)">
            <summary>
            Replaces a token in a file 
            </summary>
            <param name="token">the token to be replaced</param>
            <returns></returns>
            <example>tokens in the file are surrounded by @ signs. So ReplaceToken("name") would replace everything in a file with @name@</example>
        </member>
        <member name="T:FluentBuild.Core.Properties">
            <summary>
            Deletes the folder if it exists. If it does not exist then no action is taken
            </summary>
            <returns>The current BuildFolder</returns>
        </member>
        <member name="T:FluentBuild.Core.BuildFolder">
            <summary>
            Represents a folder used in the build process.
            </summary>
        </member>
        <member name="M:FluentBuild.Core.BuildFolder.#ctor(System.String)">
            <summary>
             Creates a new BuildFolder that is used by the build or will be created during the build
            </summary>
            <param name="path">Path to the folder</param>
        </member>
        <member name="M:FluentBuild.Core.BuildFolder.SubFolder(System.String)">
            <summary>
            Creates a new BuildFolder object for a subdirectory
            </summary>
            <param name="path">The subfolder below the current BuildFolder</param>
            <returns>a new BuildFolder object</returns>
            <remarks>The folder does not need to exist to use this method</remarks>
        </member>
        <member name="M:FluentBuild.Core.BuildFolder.RecurseAllSubFolders">
            <summary>
            Creates a new BuildFolder that encompases the current folder and all of its subdirectories
            </summary>
            <returns>A buildfolder that represents the current folder and all its subdirectories</returns>
        </member>
        <member name="M:FluentBuild.Core.BuildFolder.Delete">
            <summary>
            Deletes the folder. If the the folder can not be deleted, or does not exist then an exception is thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Core.BuildFolder.Create">
            <summary>
             Creates the folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Core.BuildFolder.Create(FluentBuild.Utilities.OnError)">
            <summary>
             Creates the folder
            </summary>
            <param name="onError">Allows you to set the error behavior</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Core.BuildFolder.ToString">
            <summary>
            Provides the current path internal to the BuildFolder object
            </summary>
            <returns>The path of the BuildFolder</returns>
        </member>
        <member name="M:FluentBuild.Core.BuildFolder.File(System.String)">
            <summary>
            Appends a filename onto the BuildFolder
            </summary>
            <param name="name">The name (or filter) of the file</param>
            <returns>A BuildArtifact that represents the full path to the file</returns>
        </member>
        <member name="M:FluentBuild.Core.BuildFolder.Files(System.String)">
            <summary>
             Creates a fileset based on a filter
            </summary>
            <param name="filter">A filter that can contain wildcards</param>
            <returns></returns>
        </member>
        <member name="M:FluentBuild.Publishing.GoogleCode.WriteFile(System.IO.Stream,System.String)">
            <summary>
            Writes the specified file to the specified stream.
            </summary>
        </member>
        <member name="M:FluentBuild.Publishing.GoogleCode.WriteLine(System.IO.Stream,System.String)">
            <summary>
            Writes the string to the specified stream and concatenates a newline.
            </summary>
        </member>
        <member name="M:FluentBuild.Publishing.GoogleCode.CreateAuthorizationToken(System.String,System.String)">
            <summary>
            Creates the authorization token.
            </summary>
        </member>
        <member name="P:FluentBuild.Publishing.GoogleCode.UserName">
            <summary>
            Gets or sets Google user name to authenticate as (this is just the username part, don't include the @gmail.com part.
            </summary>
        </member>
        <member name="P:FluentBuild.Publishing.GoogleCode.Password">
            <summary>
            Gets or sets the Google Code password (not the same as the gmail password).
            </summary>
        </member>
        <member name="P:FluentBuild.Publishing.GoogleCode.ProjectName">
            <summary>
            Gets or sets the Google Code project name to upload to.
            </summary>
        </member>
        <member name="P:FluentBuild.Publishing.GoogleCode.LocalFileName">
            <summary>
            Gets or sets the local path of the file to upload.
            </summary>
        </member>
        <member name="P:FluentBuild.Publishing.GoogleCode.TargetFileName">
            <summary>
            Gets or sets the file name that this file will be given on Google Code.
            </summary>
        </member>
        <member name="P:FluentBuild.Publishing.GoogleCode.Summary">
            <summary>
            Gets or sets the summary of the upload.
            </summary>
        </member>
    </members>
</doc>
